# .bashrc는 별칭과 실행되는 함수를 제어하는 지역적 시스템 설정과
# 각종 쉘 변수를 관리하는 명령어 모음이다.

# - 변수는 쉘 옵션을 저장하는 변수로서 밑의 식에서는
#  i 옵션이 켜져 있는지를 검사하고 있다.
case $- in
    *i*) ;;
      *) return;;
esac

# HISTCONTROL 변수를 통해 어떻게 명령어 기록을 저장할지를 설정할 수 있다. 
# ignorespace, ignoredups 변수가 있으며 각각의 의미는 공백으로 시작하는 명령어를
# 저장할지, 중복되는 명령어를 저장할지이며 둘다 설정은 아래 변수와 같다.
HISTCONTROL=ignoreboth

# 명령어 저장 기록을 덮어쓰지 않고 확장한다.
shopt -s histappend

# 명령어 히스토리 사이즈를 지정한다.
HISTSIZE=1000
HISTFILESIZE=2000

# 각 명령 후에 윈도우 사이즈를 체크하고,
# 필요하다면 열과 행의 값을 업데이트 한다.
shopt -s checkwinsize

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# 당신이 작업하고 있는 곳에서 를  chroot를 식별하는 변수를 설정한다
# debian_chroot가 가르키는 값이 없고 파일이 존재하면 그 파일로 변수를 설정
if [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# TERM 변수를 조작하여 쉘 프롬프트 환경에서 색을 설정한다.
case "$TERM" in
    xterm-color|*-256color) color_prompt=yes;;
esac

# (변수) 가 공백이 아닌 경우, (경로) 가 실행 가능하면서 (명령어)가 실행 가능 한
# 경우를 판단하고 color_prompt 를 설정
if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
	# We have color support; assume it's compliant with Ecma-48
	# (ISO/IEC-6429). (Lack of such support is extremely rare, and such
	# a case would tend to support setf rather than setaf.)
	color_prompt=yes
    else
	color_prompt=
    fi
fi
# color_prompt 변수에 따라, 커맨드 프롬프트 변수를 변경한다.

if [ "$color_prompt" = yes ]; then
    PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '
else
    PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
fi
unset color_prompt force_color_prompt

# If this is an xterm set the title to user@host:dir
# 만약 이 쉘에서 유저 이름과 경로를 각 라인에 표시하기로 설정 했다면 프롬프트 변수에 반영한다.
case "$TERM" in
xterm*|rxvt*)
    PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
    ;;
*)
    ;;
esac

# 각종 변수에 alias 키워드를 통해 색상 설정을 지원한다.
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'
    #alias dir='dir --color=auto'
    #alias vdir='vdir --color=auto'

    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi


# 또한 쉘 명령창에서의 에러와 경고에 대하여 색상을 지원할 수도 있다.
# colored GCC warnings and errors
#export GCC_COLORS='error=01;31:warning=01;35:note=01;36:caret=01;32:locus=01:quote=01'


# 여기 아래 부터는 각종 긴 명령어나 자주 사용하는 명령어를 
# 짧은 명령어로 치환하는 정의가 alias가 기술된다.

# some more ls aliases
alias ll='ls -alF'
alias la='ls -A'
alias l='ls -CF'

# Add an "alert" alias for long running commands.  Use like so:
#   sleep 10; alert
alias alert='notify-send --urgency=low -i "$([ $? = 0 ] && echo terminal || echo error)" "$(history|tail -n1|sed -e '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'')"'

# Alias definitions.
# You may want to put all your additions into a separate file like
# ~/.bash_aliases, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.

# 따로 정의된 명령어 변수를 지원한다.
if [ -f ~/.bash_aliases ]; then
    . ~/.bash_aliases
fi

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
  fi
fi
